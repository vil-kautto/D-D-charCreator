import random
import json


class Character:
    def __init__(self):
        # Fetching class data from external file generated by CharDataCreator.py
        self.class_data = {}
        with open('../data/class_data.json') as file:
            self.class_data = json.load(file)

        self.race_data = {}
        with open('../data/race_data.json') as file:
            self.race_data = json.load(file)

        self.data = {
            "attributes": {
                "Strength": 0,
                "Dexterity": 0,
                "Constitution": 0,
                "Intelligence": 0,
                "Wisdom": 0,
                "Charisma": 0
            },
            "features": []
        }
        char_class = self.get_class(random.randint(1, 12))
        print('Class: {}'.format(char_class.capitalize()))
        char_race = self.get_race(random.randint(1, 9))
        print('Race: {}'.format(char_race.capitalize()))

        print("\nRacial Features:")
        self.data["features"].append(self.race_data[char_race]["features"])
        for feature in self.data["features"][0]:
            print("  {}".format(feature))

        print("\nClass Features:")
        self.data["features"].append(self.class_data[char_class]["features"])
        for feature in self.data["features"][1]:
            print("  {}".format(feature))

        # Generating, modifying and printing random attributes
        self.data["attributes"] = self.race_data[char_race]["attributes"]
        self.get_random_attr(self.data['attributes'])

        self.get_class_details(self.class_data[char_class])
        # self.get_race_details(self.class_data[char_race])

    # Generates stats based on following model: 4d6 - smallestRoll
    # Generated stats are between 3-18, minor bias on median
    @staticmethod
    def generate_stat():
        random_nums = [0, 0, 0, 0]
        for i in range(0, 4):
            random_nums[i] = random.randint(1, 6)

        # Sort the list, remove the smallest number and return the sum of remaining values
        random_nums.sort()
        random_nums.pop(0)
        return sum(random_nums)

    # Defines a modifier based on given attribute
    @staticmethod
    def define_modifier(value):
        return int(value / 2 - 5)

        # Gives the character a list of attributes and modifiers

    def get_random_attr(self, attr):
        print("\nAttributes:")
        for key, value in attr.items():
            value = self.data['attributes'][key] + self.generate_stat()
            modifier = self.define_modifier(value)
            print(' {}: {}, Modifier: {:+d}'.format(key, value, modifier))
            self.data['attributes'][key] = value

    # Selects a class form all classes based on input
    @staticmethod
    def get_class(i):
        # print(i)
        classes = {
            1: "barbarian",
            2: "bard",
            3: "cleric",
            4: "druid",
            5: "fighter",
            6: "monk",
            7: "paladin",
            8: "ranger",
            9: "rogue",
            10: "sorcerer",
            11: "warlock",
            12: "wizard"
        }
        return classes[i]

    # Picks spells, cantrips, proficiencies and health stats for wizard class from external data files
    @staticmethod
    def get_class_details(character):
        # Fetching additional data for spellcasters
        if character["type"] == "spellcaster":
            cantrips = character["cantrips"]
            cantrip_count = character["spell_details"][0]
            print("\nCantrips:")
            for i in range(0, cantrip_count):
                random_num = random.randint(0, len(cantrips) - 1)
                print(" {}: {}".format(i + 1, cantrips[random_num]))
                cantrips.pop(random_num)

            spell_slots = character["spell_details"][2]
            print("\n{}: {}".format("Spell slots", spell_slots))

            spells = character["spells"]
            print("Spells:")
            spell_count = character["spell_details"][1]
            if spell_count > 0:
                for i in range(0, spell_count):
                    random_num = random.randint(0, len(spells) - 1)
                    print(" {}: {}".format(i + 1, spells[random_num]))
                    spells.pop(random_num)
            else:
                for i in range(0, len(spells)):
                    random_num = random.randint(0, len(spells) - 1)
                    print(" {}: {}".format(i + 1, spells[random_num]))
                    spells.pop(random_num)

        proficiencies = character["proficiencies"]
        print("\nProficiencies:")
        for key, value in proficiencies.items():
            print(" {}: {}".format(key, value))

        health = character["health"]
        print("\nHealth:")
        for key, value in health.items():
            print(" {}: {}".format(key, value))

    # Selects a race form all races based on input
    @staticmethod
    def get_race(i):
        races = {
            1: "dragonborn",
            2: "dwarf",
            3: "elf",
            4: "gnome",
            5: "half-elf",
            6: "halfling",
            7: "half-orc",
            8: "human",
            9: "tiefling",
        }
        return races[i]

    @staticmethod
    def get_race_details(self, race_name):
        print(race_name)
